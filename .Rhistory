shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
dim(flags)
str(flags)
viewinfo(flags)
viewinfo(flags
)
viewinfo()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
quit()
ls()
getwd
getwd()
dir()
source('~/Desktop/Data Science/R_Workspace/mean_tutorial.R')
makeVector(3)
c <0 makeVector(3)
c <- makeVector(3)
c
m
x$getmean*
()
x$getmean()
?makeVector
makeVector(10)
10
makeVector()
m
x
a <- makeVector()
a$getmean()
a
a(10)
a$set(c(1,2,3,4,5))
a$get()
a$getmean()
a$setmean()
a$getmean()
a$get()
makeVector(c(1,2,3,4,5,6,7))
c <- makeVector(c(1,2,3,4,5,6,7))
c$get()
c$getmean()
c$setmean()
c$setmean(c(1,2,3,4,5,6,7))
c$getmean()
mean(c$get())
c$setmean(mean(c$get())
)
c$getmean()
c
c$get()
c$getmean()
cachemean(c)
x <- matrix(1:8,4,4)
x
solve(x)
x <- matrix(1:6,2,3)
x
solve(x)
x <- matrix(1:16,4,4)
solve(x)
x <- matrix(1:9,3,3)
solve(x)
x <- matrix(c(3,4,323,42,34,232,55,25,77),3,3)
x
solve(x)
d<-x*solve(x)
d
x
x <- matrix(1:9,3,3)
x
x <- matrix(1:4,2,2)
x
solve(x)
source('~/Desktop/Data Science/R_Workspace/mean_tutorial.R')
makeVector(c(1,2,3,4))
makeVector(a<-c(1,2,3,4))
a<-c(1,2,3,3,4,4,4,)
a<-c(1,2,3,3,4,4,4,)
a<-c(1,2,3,3,4,4,4,6)
makeVector(a)
a
makeVector(2)
a
typeof(a)
as.numeric(a)
makeVector(as.numeric(a))
a$get()
a<-makeVector(c(1,2,3,2,223,3,545,767767))
a
a$get()
cachemean(a)
cachemean(a)
source('~/Desktop/Data Science/R_Workspace/mean_tutorial.R')
a<-makeVector(c(1,2,3,2,223,3,545,767767))
a$get()
cachemean(a)
cachemean(a)
c<-matrix(1:4,2,3)
c<-matrix(1:4,2,2)
c
solve(c)
c<-matrix(1:9,3,3)
c
solve(c)
x<-matrix(1:9,3,3)
x
solve(x)
x<-matrix(1:9,3,3)
solve(x)
x<-matrix(1:9,3,3)
x
x<-matrix(1:9,3,3)
solve(x)
solve(x)
solve(x)
solve(x)
x
solve(x)
solve(x)
solve(x)
x
y<-matrix(solve(x))
x<-matrix(1:4,2,2)
y<-matrix(solve(x))
y
solve(x)
?dim
dim(x)
?nrow
nrow(x)
ncol(x)
y<-matrix(1:6,2,3)
nrow(y)
ncol(y)
z<-matrix(solve(x),nrow = nrow(x), ncol = ncol(x))
z
solve(y)
z = matrix()
z
z<-matrix(solve(x),nrow = nrow(x), ncol = ncol(x))
z
z = matrix()
is.null(z)
source('~/Desktop/Data Science/R_Workspace/InverseMatrixAssignment.R')
a<-createMatrix(matrix(1:4,2,2))
a
a$get()
cachemean(a)
source('~/Desktop/Data Science/R_Workspace/InverseMatrixAssignment.R')
a<-createMatrix(matrix(1:4,2,2))
a
a$get()
a$getInvMat()
a$getInvMat()
b<-matrix(solve(a))
b<-matrix(solve(a$get()))
b
b<-matrix(solve(a$get()),2,2)
b
a$setInvMat(b)
a$getInvMat()
c<-b
c
source('~/Desktop/Data Science/R_Workspace/InverseMatrixAssignment.R')
a<-createMatrix(matrix(1:4,2,2))
cacheInvMat(a)
is.null(z)
z
is.null(b)
b
d<-b
d
a$get()
source('~/Desktop/Data Science/R_Workspace/InverseMatrixAssignment.R')
a<-createMatrix(matrix(1:4,2,2))
cacheInvMat(a)
cacheInvMat <- function(x,...){
invMat <- x$getInvMat()
if(!is.null(invMat)){
message("Getting Cached Mean!")
return (invMat)
}
temp <- x$get()
invMat <- matrix(solve(temp),nrow = nrow(temp), ncol = ncol(temp))
x$setmean(invMat)
invMat
}
cacheInvMat(a)
debugSource('~/Desktop/Data Science/R_Workspace/InverseMatrixAssignment.R')
a<-createMatrix(matrix(1:4,2,2))
cacheInvMat(a)
View(temp)
source('~/Desktop/Data Science/R_Workspace/InverseMatrixAssignment.R')
a<-createMatrix(matrix(1:4,2,2))
cacheInvMat(a)
cacheInvMat(a)
source('~/Desktop/Data Science/R_Workspace/InverseMatrixAssignment.R')
a<-createMatrix(matrix(1:4,2,2))
cacheInvMat(a)
source('~/Desktop/Data Science/R_Workspace/InverseMatrixAssignment.R')
cacheInvMat(a)
remove(invMat)
cacheInvMat(a)
source('~/Desktop/Data Science/R_Workspace/InverseMatrixAssignment.R')
source('~/Desktop/Data Science/R_Workspace/InverseMatrixAssignment.R')
a
a<-createMatrix(matrix(1:4),2,2)
a<-createMatrix(matrix(1:4),2,2))
a<-createMatrix(matrix(1:4,2,2))
a
a$get()
cacheInvMat(a)
cacheInvMat(a)
a
x<-matrix(1:6,2,3)
y<-matrix(1:6,2,3)
x
y
x == y
all(x == y)
dim(x)
?matrix
y<-matrix(1:6,2,3,dimnames = c(row, column))
y<-matrix(1:6,2,3,dimnames = c("fff","dfdf"))
y<-matrix(1:6,2,3,dimnames = c(4,9))
is.list(c(4,9))
typeof(c(4,9))
y<-matrix(1:6,2,3,dimnames = list("fff","dfdf"))
y<-matrix(1:6,2,3,dimnames = list(c("row1", "row2"),c("c1","c2","c3")))
y
x
all(x==y)
dim(x)
dim(y)
dim(y) = dim(y)
dim(y) = dim(x)
dim(y) == dim(x)
dimnames(y)
y
x
y<-matrix(1:6,2,3,dimnames = list(c("row1", "row2"),c("c1","c2","c3")))
x
y
dim(y) == dim(x)
y
x
source('~/Desktop/Data Science/R_Workspace/InverseMatrixAssignment.R')
source('~/Desktop/Data Science/R_Workspace/InverseMatrixAssignment.R')
a<-makeCacheMatrix(matrix(1:4,2,2))
a
a$get()
solve(x)
solve(a)
solve(a$get())
b<-makeCacheMatrix(matrix(5:8,2,2))
b$get()
solve(b$get())
cacheSolve(a)
cacheSolve(b)
cacheSolve(a)
cacheSolve(b)
cacheSolve(b)
b<-makeCacheMatrix(matrix(9:12,2,2))
cacheSolve(b)
ls()
source('~/Desktop/Data Science/R_Workspace/InverseMatrixAssignment.R')
a<-makeCacheMatrix(matrix(1:4,2,2))
cacheSolve(a)
a$get()
a<-makeCacheMatrix(matrix(1:4,2,2))
cacheSolve(a)
cacheSolve(a)
a$set() <- matrix(4:1,2,2)
y<- matrix(4:1,2,2)
y
a
a$get()
cacheSolve(a)
a$getInvMat()
a$set() <- y
a$get()
debugSource('~/Desktop/Data Science/R_Workspace/InverseMatrixAssignment.R')
a<-makeCacheMatrix(matrix(1:4,2,2))
a$set() <- y
debugSource('~/Desktop/Data Science/R_Workspace/InverseMatrixAssignment.R')
a<-makeCacheMatrix(matrix(1:4,2,2))
a$get()
y<- matrix(4:1,2,2)
a$set() <- y
a$set(y)
a$getInvMat()
source('~/Desktop/Data Science/R_Workspace/InverseMatrixAssignment.R')
source('~/Desktop/Data Science/R_Workspace/InverseMatrixAssignment.R')
a<-makeCacheMatrix(matrix(1:4,2,2))
a$get()
a$getInvMat()
cacheSolve(a)
cacheSolve(a)
a<-makeCacheMatrix(matrix(1:16,4,4))
cacheSolve(a)
a<-makeCacheMatrix(matrix(c(1:8,16:9),4,4))
a$get()
cacheSolve(a)
a<-makeCacheMatrix(matrix(c(1:10,20:26),4,4))
a$get()
a<-makeCacheMatrix(matrix(c(1:10,21:26),4,4))
a$get()
cacheSolve(a)
a<-makeCacheMatrix(matrix(c(21:24,1:8,35:38),4,4))
a$get()
cacheSolve(a)
a<-makeCacheMatrix(matrix(c(21:24,1:4,100:103,35:38),4,4))
a$get()
cacheSolve(a)
a<-makeCacheMatrix(matrix(c(21:24,1:4,0:0,35:38),4,4))
a$get()
a<-makeCacheMatrix(matrix(c(21:24,1:4,0,0,0,0,35:38),4,4))
a$get()
cacheSolve(a)
a<-makeCacheMatrix(matrix(c(23,56,23323,787,21:24,1:4,35:38),4,4))
a$get()
cacheSolve(a)
a<-makeCacheMatrix(matrix(c(23,56,23323,787,21:24,1:4),3,3))
a$get()
cacheSolve(a)
cacheSolve(a)
source('~/Desktop/Data Science/R_Workspace/ProgrammingAssignment2/cachematrix.R')
a<-makeCacheMatrix(matrix(c(23,56,23323,787,21:24,1:4),3,3))
a$get()
cacheSolve(a)
cacheSolve(a)
source('~/Desktop/Data Science/R_Workspace/InverseMatrixAssignment.R')
traceback()
a<-makeCacheMatrix(matrix(1:9,3,3))
a$get()
cacheSolve(a)
traceback()
cacheSolve(a)
recover()
lm(y-x)
traceback()
print("hi")
debug(print)
sddsd
sdsd
x
quit
exit
quit()
?browser
"ff"
C
ls()
library(datasets)
data("iris")
?iris
iris$Sepal.Length
iris
?tapply
tapply(iris$Sepal.Length,Species,mean)
tapply(iris$Sepal.Length,iris$Species,mean)
colMeans(iris)
iris[,1:4]
apply(iris[,1:4],1,mean)
apply(iris[,1:4],2,mean)
apply(iris,2,mean)
rowMeans(iris)
rowMeans(iris[,1:4])
apply(iris[,1:4],2,mean)
typeof
((apply(iris[,1:4],2,mean))
)
typeof
((apply(iris[,1:4],2,mean))
)
typeof
((apply(iris[,1:4],2,mean)))
typeof((apply(iris[,1:4],2,mean)))
data("mtcars")
debug(ls)
ls()
View(mtcars)
Q
Q
mtcars
library(daasets)
library(datasets)
data(mirrors)
data(mtcars)
View(mtcars)
apply(mtcars,2 mean)
\
apply(mtcars,2,min)
apply(mtcars,2,mean)
sapply(mtcars,cyl,mean)
sapply(mtcars,mtcars$cyl,mean)
with(mtcars,tapply(mpg,cyl,mean))
tapply(mtcars$mpg,mtcars$cyl,mean)
split(mtcars,mtcars$cyl)
with(mtcars,tapply(mpg,cyl,mean))
tapply(mtcars$mpg,mtcars$cyl,mean)
tapply(mtcars$cyl,mtcars$mpg,mean)
lapply(mtcars,mean)
mean(mtcars$mpg,mtcars$cyl)
sapply(split(mtcars$mpg,mtcars$cyl),mean)
tapply(mtcars$mpg,mtcars$cyl,mean)
tapply(mtcars$hp,mtcars$cyl,mean)
round(6.55)
a<-tapply(mtcars$hp,mtcars$cyl,mean)
a
a$8
a[1]
a[3] - a[1]
round(a[3] - a[1])
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head()
head(plants)
head(plants,10)
tail(pl)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str()
str(plants)
setwd("ProgrammingAssignment3/")
outcome <- read.csv("outcome-of-care-measures.csv")
ls
length(outcome$Hospital.Name)
b<4
b<-4
b>length(outcome$Hospital.Name)
b<length(outcome$Hospital.Name)
b<-"worst"
c<-"worst"
b==c
b<-c(2,3,4,4,5,3,NA)
b
c<-b[!is.na(b)]
c
source('~/Desktop/Data Science/R_Workspace/ProgrammingAssignment3/rankhospital.R')
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
source('~/Desktop/Data Science/R_Workspace/ProgrammingAssignment3/rankhospital.R')
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
source('~/Desktop/Data Science/R_Workspace/ProgrammingAssignment3/rankhospital.R')
rankhospital("MN", "heart attack", 5000)
rankhospital("MD", "heart attack", "worst")
length(outcome[,!is.na(outcome[,2])])
length(!is.na(outcome[,11]))
!is.na(outcome[,11])
source('~/Desktop/Data Science/R_Workspace/ProgrammingAssignment3/rankhospital.R')
rankhospital("MD", "heart attack", "worst")
length(outcome[,11])
outcome <- read.csv("outcome-of-care-measures.csv", na.strings = "Not Available", colClasses = "character")
!is.na(outcome[,11])
length(outcome[,11])
length(!is.na(outcome[,11]))
d<-(!is.na(outcome[,11]))
length(isTRUE(d))
length(d[isTRUE()]
)
length(d[isTRUE()])
?isTRUE
outcome$Hospital.Name[!is.na(outcome[,11])]
d<-outcome$Hospital.Name[!is.na(outcome[,11])]
length(outcome$Hospital.Name[!is.na(outcome[,11])])
source('~/Desktop/Data Science/R_Workspace/ProgrammingAssignment3/rankhospital.R')
rankhospital("MD", "heart attack", "worst")
source('~/Desktop/Data Science/R_Workspace/ProgrammingAssignment3/rankhospital.R')
rankhospital("MD", "heart attack", "worst")
View(outcome)
source('~/Desktop/Data Science/R_Workspace/ProgrammingAssignment3/rankhospital.R')
rankhospital("MD", "heart attack", "worst")
source('~/Desktop/Data Science/R_Workspace/ProgrammingAssignment3/rankhospital.R')
source('~/Desktop/Data Science/R_Workspace/ProgrammingAssignment3/rankhospital.R')
rankhospital("MD", "heart attack", "worst")
rankhospital("MD", "heart attack", "best")
source('~/Desktop/Data Science/R_Workspace/ProgrammingAssignment3/rankhospital.R')
rankhospital("MD", "heart attack", "best")
rankhospital("MD", "heart attack", "worst")
source('~/Desktop/Data Science/R_Workspace/ProgrammingAssignment3/rankhospital.R')
rankhospital("MD", "heart attack", "worst")
rankhospital("MD", "heart attack", "best")
